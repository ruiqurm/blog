#+hugo_base_dir: ../

* TODO blog plan                                                       :plan:
:PROPERTIES:
:EXPORT_FILE_NAME: blog-plan
:END:
博客的工具链还有许多要完善的地方，例如：
 - [ ] org-mode和ox-hugo还需要学习一下
   - [ ] ox-hugo
   - [ ] org-mode
 - [ ] 向其他平台推送
   - [ ] CSDN
   - [ ] 微信公众号
   - [ ] 简书
 - [ ] 中英文翻译
   - [ ] 调用ox-hugo时加一个钩子，去调用一下大模型

* DONE Clangd Invalid AST问题
CLOSED: [2024-10-22 周二 11:22]
:PROPERTIES:
:EXPORT_FILE_NAME: clangd_invalid_ast
:END:

在读Linux源码时，用clangd解析代码遇到了一些问题。提示错误为error: invalid AST
** 生成kernel clangd文件的方法
*** 可以用bear直接生成
*** 或者可以用gen_compile_commands.py
#+begin_src
#!/usr/bin/env python
# SPDX-License-Identifier: GPL-2.0
#
# Copyright (C) Google LLC, 2018
#
# Author: Tom Roeder <tmroeder@google.com>
#
"""A tool for generating compile_commands.json in the Linux kernel."""

import argparse
import json
import logging
import os
import re

_DEFAULT_OUTPUT = 'compile_commands.json'
_DEFAULT_LOG_LEVEL = 'WARNING'

_FILENAME_PATTERN = r'^\..*\.cmd$'
_LINE_PATTERN = r'^cmd_[^ ]*\.o := (.* )([^ ]*\.c)$'
_VALID_LOG_LEVELS = ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']

# A kernel build generally has over 2000 entries in its compile_commands.json
# database. If this code finds 500 or fewer, then warn the user that they might
# not have all the .cmd files, and they might need to compile the kernel.
_LOW_COUNT_THRESHOLD = 500


def parse_arguments():
    """Sets up and parses command-line arguments.

    Returns:
        log_level: A logging level to filter log output.
        directory: The directory to search for .cmd files.
        output: Where to write the compile-commands JSON file.
    """
    usage = 'Creates a compile_commands.json database from kernel .cmd files'
    parser = argparse.ArgumentParser(description=usage)

    directory_help = ('Path to the kernel source directory to search '
                      '(defaults to the working directory)')
    parser.add_argument('-d', '--directory', type=str, help=directory_help)

    output_help = ('The location to write compile_commands.json (defaults to '
                   'compile_commands.json in the search directory)')
    parser.add_argument('-o', '--output', type=str, help=output_help)

    log_level_help = ('The level of log messages to produce (one of ' +
                      ', '.join(_VALID_LOG_LEVELS) + '; defaults to ' +
                      _DEFAULT_LOG_LEVEL + ')')
    parser.add_argument(
        '--log_level', type=str, default=_DEFAULT_LOG_LEVEL,
        help=log_level_help)

    args = parser.parse_args()

    log_level = args.log_level
    if log_level not in _VALID_LOG_LEVELS:
        raise ValueError('%s is not a valid log level' % log_level)

    directory = args.directory or os.getcwd()
    output = args.output or os.path.join(directory, _DEFAULT_OUTPUT)
    directory = os.path.abspath(directory)

    return log_level, directory, output


def process_line(root_directory, file_directory, command_prefix, relative_path):
    """Extracts information from a .cmd line and creates an entry from it.

    Args:
        root_directory: The directory that was searched for .cmd files. Usually
            used directly in the "directory" entry in compile_commands.json.
        file_directory: The path to the directory the .cmd file was found in.
        command_prefix: The extracted command line, up to the last element.
        relative_path: The .c file from the end of the extracted command.
            Usually relative to root_directory, but sometimes relative to
            file_directory and sometimes neither.

    Returns:
        An entry to append to compile_commands.

    Raises:
        ValueError: Could not find the extracted file based on relative_path and
            root_directory or file_directory.
    """
    # The .cmd files are intended to be included directly by Make, so they
    # escape the pound sign '#', either as '\#' or '$(pound)' (depending on the
    # kernel version). The compile_commands.json file is not interepreted
    # by Make, so this code replaces the escaped version with '#'.
    prefix = command_prefix.replace('\#', '#').replace('$(pound)', '#')

    cur_dir = root_directory
    expected_path = os.path.join(cur_dir, relative_path)
    if not os.path.exists(expected_path):
        # Try using file_directory instead. Some of the tools have a different
        # style of .cmd file than the kernel.
        cur_dir = file_directory
        expected_path = os.path.join(cur_dir, relative_path)
        if not os.path.exists(expected_path):
            raise ValueError('File %s not in %s or %s' %
                             (relative_path, root_directory, file_directory))
    return {
        'directory': cur_dir,
        'file': relative_path,
        'command': prefix + relative_path,
    }


def main():
    """Walks through the directory and finds and parses .cmd files."""
    log_level, directory, output = parse_arguments()

    level = getattr(logging, log_level)
    logging.basicConfig(format='%(levelname)s: %(message)s', level=level)

    filename_matcher = re.compile(_FILENAME_PATTERN)
    line_matcher = re.compile(_LINE_PATTERN)

    compile_commands = []
    import tqdm
    for dirpath, _, filenames in os.walk(directory):
        for filename in tqdm.tqdm(filenames):
            if not filename_matcher.match(filename):
                continue
            filepath = os.path.join(dirpath, filename)

            with open(filepath, 'rt') as f:
                for line in f:
                    result = line_matcher.match(line)
                    if not result:
                        continue

                    try:
                        entry = process_line(directory, dirpath,
                                             result.group(1), result.group(2))
                        compile_commands.append(entry)
                    except ValueError as err:
                        logging.info('Could not add line from %s: %s',
                                     filepath, err)

    with open(output, 'wt') as f:
        json.dump(compile_commands, f, indent=2, sort_keys=True)

    count = len(compile_commands)
    if count < _LOW_COUNT_THRESHOLD:
        logging.warning(
            'Found %s entries. Have you compiled the kernel?', count)


if __name__ == '__main__':
    main()
#+end_src
** 原因
阅读了reddit上面一个post。博主也是一样用了交叉编译。下面回复提到clangd不能处理-march 和 -mabi等架构相关的命令
#+begin_quote
Second, clangd doesn’t like the abi and arch specs via -march and -mabi so if they are in the compile commands, then try removing them manually or with a compile flags text file.
#+end_quote
(See https://www.reddit.com/r/neovim/comments/1drvrwj/for_anyone_who_is_familiar_with_clangd_neovim/)

** 方案
因此只需要移除或者在.clangd里面添加一个flag就行。
加flag可以参考：[[https://github.com/carbon-language/carbon-lang/pull/4164][carbon-lang的pr]]
#+begin_src
CompileFlags:       
  Remove: [-march=*,-mabi=*]
#+end_src

#+filetags: linux rust-for-linux @notes
#+filetags: rust-for-linux linux @notes
* Rust for Linux笔记
** TODO Rust for Linux笔记-1
:PROPERTIES:
:EXPORT_FILE_NAME: rust-for-linux笔记-1
:END:

Rust
*** Opaque
#+begin_src rust
#[repr(transparent)]
pub struct Opaque<T> {
    value: UnsafeCell<MaybeUninit<T>>,
    _pin: PhantomPinned,
}
#+end_src
和C交互的地方，都使用Opaque
**** Design
***** transparent

保证内部非0长度的字段可以转化为Opaque<T>类型。
参考：https://doc.rust-lang.org/nomicon/other-reprs.html#reprtransparent
***** !Unpin
大部分C的字段都是Pin的，加上此PhantomPinned，使得语义正确
#+begin_quote
Adds a `PhantomPinned` field to `Opaque<T>`. This removes the last Rust
guarantee: the assumption that the type `T` can be freely moved. This is
not the case for many types from the C side (e.g. if they contain a
`struct list_head`). This change removes the need to add a
`PhantomPinned` field manually to Rust structs that contain C structs
which must not be moved.
#+end_quote
[[https://github.com/Rust-for-Linux/linux/commit/0b4e3b6f6b79b1add04008a6ceaaf661107e8902][rust: types: make Opaque be !Unpin]]
**** Usage

*** ForeignOwnable
*** ScopeGuard




Memory model and atomic API in Rust:
https://lore.kernel.org/rust-for-linux/20240322233838.868874-1-boqun.feng@gmail.com/

Alloc: use kernel alloc instead
https://github.com/Rust-for-Linux/linux/commits/rust-next/rust/macros
*** Task
#+begin_src rust
#[repr(transparent)]
pub struct Task(pub(crate) Opaque<bindings::task_struct>);

/// Returns the currently running task.
#[macro_export]
macro_rules! current {
    () => {
        // SAFETY: Deref + addr-of below create a temporary `TaskRef` that cannot outlive the
        // caller.
        unsafe { &*$crate::task::Task::current() }
    };
}


#+end_src
**** Example

** DONE Rust for Linux笔记-2
CLOSED: [2024-11-04 周一 12:17]
:PROPERTIES:
:EXPORT_FILE_NAME: rust-for-linux笔记-2
:END:

今天看看rust-next分支下面的几个宏。目前写驱动用得比较多的应该时前面三个。其他的偏向于写宏时候的
工具。
*** module
#+begin_src rust
use kernel::prelude::*;
module!{
    type: MyDeviceDriverModule,
    name: "my_device_driver_module",
    author: "Rust for Linux Contributors",
    description: "My device driver requires firmware",
    license: "GPL",
    firmware: ["my_device_firmware1.bin", "my_device_firmware2.bin"],
}
struct MyDeviceDriverModule;
#+end_src
这个宏会按照一定的模板去生成rust代码。
**** 生成__init和__exit函数
模块初始化时，会类型linux驱动调用init和exit(或者register和unregister)。这里rfl封装了一层，
不是直接调用用户提供的函数，而是去调用impl了Module trait提供的初始化函数，初始化完成后，将
其绑定到一个静态全局变量上。

这里还考虑了如果CONFIG(Module)没开的情况（下面没贴出来）
#+begin_src rust
static mut __MOD: Option<{type_}> = None;

#[no_mangle]
#[link_section = \".init.text\"]
pub unsafe extern \"C\" fn init_module() -> core::ffi::c_int {{
    // SAFETY: This function is inaccessible to the outside due to the double
    // module wrapping it. It is called exactly once by the C side via its
    // unique name.
    unsafe {{ __init() }}
}}

#[used]
#[link_section = \".init.data\"]
static __UNIQUE_ID___addressable_init_module: unsafe extern \"C\" fn() -> i32 = init_module;


unsafe fn __init() -> core::ffi::c_int {{
    match <{type_} as kernel::Module>::init(&super::super::THIS_MODULE) {{
        Ok(m) => {{
            // SAFETY: No data race, since `__MOD` can only be accessed by this
            // module and there only `__init` and `__exit` access it. These
            // functions are only called once and `__exit` cannot be called
            // before or during `__init`.
            unsafe {{
                __MOD = Some(m);
            }}
            return 0;
        }}
        Err(e) => {{
            return e.to_errno();
        }}
    }}
}}
#+end_src

对于exit的情况,这里不是像C一样调用某个函数，而是等待drop函数自动调用。也就是用户需要为自己实现
的type实现drop。最后会将__MOD置为None.
**** 生成mod_info
在模板的最后面是一些mod_info。目前支持author, descripten,license等等。

modinfo使用一个ModInfoBuilder去构建。最后的mod信息会保存到buffer中。
#+begin_src rust
struct ModInfoBuilder<'a> {
    module: &'a str,
    counter: usize,
    buffer: String,
}
#+end_src
每次写入会调用emit_base，其基本模板如下：
#+begin_src rust
{cfg}
#[doc(hidden)]
#[link_section = \".modinfo\"]
#[used]
pub static __{module}_{counter}: [u8; {length}] = *{string};
#+end_src
- cfg是一个"#[cfg(not(MODULE))]" 或者"#[cfg(MODULE)]"
- module为当前模块名
- counter是一个会自增的int
- string是一个如{field}={content}或者{module}.{field}={content}\0的modinfo

*** vtable
rust的trait和kernel的vtable十分相似，他们的区别之处在于二者对于未实现函数的表示。Rust中是提
供默认实现（一般是返回Error::EINVAL），而linux则返回NULL函数指针。

这个宏的主要作用是为rust trait生成HAS_XXX的宏。对于trait，所有的HAS_*都为false；对于impl，
实现了的function为定义其HAS_*变量为true。
**** OperationsVTable
block/mq中实现了一个OperationVTable的例子。
#+begin_src rust
#[macros::vtable]
pub trait Operations: Sized {
    /// Called by the kernel to queue a request with the driver. If `is_last` is
    /// `false`, the driver is allowed to defer committing the request.
    fn queue_rq(rq: ARef<Request<Self>>, is_last: bool) -> Result;

    /// Called by the kernel to indicate that queued requests should be submitted.
    fn commit_rqs();

    /// Called by the kernel to poll the device for completed requests. Only
    /// used for poll queues.
    fn poll() -> bool {
        crate::build_error(crate::error::VTABLE_DEFAULT_ERROR)
    }
}

pub(crate) struct OperationsVTable<T: Operations>(PhantomData<T>);
impl<T: Operations> OperationsVTable<T> {
 // ...
    unsafe extern "C" fn commit_rqs_callback(_hctx: *mut bindings::blk_mq_hw_ctx) {
        T::commit_rqs()
    }
}
#+end_src
Operations是rust用户需要实现的trait，而下面的VTable是rfl生成的用于和内核沟通的抽象层。

Vtable中实现了许多*_callback风格的函数，这是让c侧调用的函数。这些callback函数还负责将c指针类
型转为rust的安全抽象，最后去调用用户写的rust trait函数。

impl中还有一个VTABLE变量。这个变量将上面的callback存到FFI的blk_mq_ops结构体中，该结构体是
由Rust bindgen产生的。

#+begin_src rust
impl<T: Operations> OperationsVTable<T> {
   // ...
   const VTABLE: bindings::blk_mq_ops = bindings::blk_mq_ops {
        queue_rq: Some(Self::queue_rq_callback),
        queue_rqs: None,
        commit_rqs: Some(Self::commit_rqs_callback),
        get_budget: None,
        put_budget: None,
        set_rq_budget_token: None,
        get_rq_budget_token: None,
        timeout: None,
        poll: if T::HAS_POLL {
            Some(Self::poll_callback)
        } else {
            None
        },
        complete: Some(Self::complete_callback),
        init_hctx: Some(Self::init_hctx_callback),
        exit_hctx: Some(Self::exit_hctx_callback),
        init_request: Some(Self::init_request_callback),
        exit_request: Some(Self::exit_request_callback),
        cleanup_rq: None,
        busy: None,
        map_queues: None,
        #[cfg(CONFIG_BLK_DEBUG_FS)]
        show_rq: None,
    };
}

/// FFI interface
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct blk_mq_ops {
    pub queue_rq: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut blk_mq_hw_ctx,
            arg2: *const blk_mq_queue_data,
        ) -> blk_status_t,
    >,
    pub commit_rqs: ::core::option::Option<unsafe extern "C" fn(arg1: *mut blk_mq_hw_ctx)>,
    pub queue_rqs: ::core::option::Option<unsafe extern "C" fn(rqlist: *mut *mut request)>,
    pub get_budget:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut request_queue) -> core::ffi::c_int>,
    pub put_budget: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut request_queue, arg2: core::ffi::c_int),
    >,
    pub set_rq_budget_token:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut request, arg2: core::ffi::c_int)>,
    pub get_rq_budget_token:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut request) -> core::ffi::c_int>,
    pub timeout:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut request) -> blk_eh_timer_return>,
    pub poll: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut blk_mq_hw_ctx,
            arg2: *mut io_comp_batch,
        ) -> core::ffi::c_int,
    >,
    pub complete: ::core::option::Option<unsafe extern "C" fn(arg1: *mut request)>,
    pub init_hctx: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut blk_mq_hw_ctx,
            arg2: *mut core::ffi::c_void,
            arg3: core::ffi::c_uint,
        ) -> core::ffi::c_int,
    >,
    pub exit_hctx: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut blk_mq_hw_ctx, arg2: core::ffi::c_uint),
    >,
    pub init_request: ::core::option::Option<
        unsafe extern "C" fn(
            set: *mut blk_mq_tag_set,
            arg1: *mut request,
            arg2: core::ffi::c_uint,
            arg3: core::ffi::c_uint,
        ) -> core::ffi::c_int,
    >,
    pub exit_request: ::core::option::Option<
        unsafe extern "C" fn(set: *mut blk_mq_tag_set, arg1: *mut request, arg2: core::ffi::c_uint),
    >,
    pub cleanup_rq: ::core::option::Option<unsafe extern "C" fn(arg1: *mut request)>,
    pub busy: ::core::option::Option<unsafe extern "C" fn(arg1: *mut request_queue) -> bool_>,
    pub map_queues: ::core::option::Option<unsafe extern "C" fn(set: *mut blk_mq_tag_set)>,
    pub show_rq: ::core::option::Option<unsafe extern "C" fn(m: *mut seq_file, rq: *mut request)>,
}
#+end_src

使用时，将VTABLE传给c一侧的结构体初始化。之后就是C通过FFI接口调用rust了。
#+begin_src rust
ops: OperationsVTable::<T>::build()
#+end_src
*** pin_data
文档中说和[[https://crates.io/crates/pin-project-lite][pin-project-lite]]比较类似。需要这个结构时使用#[pin_data]修饰整个结构体，对于特定的
field，使用#[pin]去修饰field
*** paste 和 concat
**** paste
提供了一个固定的写法用于实现宏中的复制功能。文档中主要举了生成相同前缀宏和生成相同内容函数的两个
例子（手动泛型..）
**** concat
这个也是个宏工具，提供的是拼接的功能。文档中指出生成前缀也可以拼接方式实现

这个方式应该比较c-style
